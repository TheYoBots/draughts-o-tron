/**
 * Game subscribes to gameId events and handles them posting moves
 * generated by player object that must implement two methods:
 * 
 * getNextMove(array of hubMoves) returns hubMove
 * getReply(chat event) returns chat message  
 * 
 */
class Game {

    /**
     * Initialise with interface to lidraughts.
     */
    constructor(api, name, player) {
        this.api = api;
        this.name = name;
        this.player = player;
        this.engine = player.getEngine();
    }

    start(gameId) {
        this.gameId = gameId;
        this.engine.setGameId(gameId);
        this.engine.setApi(this.api);
        this.api.streamGame(gameId, (event) => this.handler(event));
    }

    handleChatLine(event) {
        if (event.username !== this.name) {
            const reply = this.player.getReply(event);
            if (reply) {
                this.api.chat(this.gameId, event.room, reply);
            }
        }
    }

    handler(event) {
        switch (event.type) {
            case "chatLine":
                this.handleChatLine(event);
                break;
            case "gameFull":
                this.colour = this.playingAs(event);
                this.playNextMove(event.state.moves);
                break;
            case "gameState":
                this.playNextMove(event.moves);
                break;
            default:
                console.log("Unhandled game event : " + JSON.stringify(event));
        }
    }

    playNextMove(previousMoves) {
        let moves = (previousMoves === "") ? [] : previousMoves.split(" ");
        let isMyTurn = this.isTurn(this.colour, moves);
        this.engine.playNextMove(moves, isMyTurn);
    }

    playingAs(event) {
        return (event.white.name === this.name) ? "white" : "black";
    }

    isTurn(colour, moves) {
        var parity = moves.length % 2;
        return (colour === "white") ? (parity === 0) : (parity === 1);
    }
}
  
module.exports = Game;